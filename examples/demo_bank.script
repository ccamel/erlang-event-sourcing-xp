%% Interactive demo showcasing the event sourcing engine.
%%
%% The example uses a simple "bank account" aggregate: a single stream
%% of domain events representing deposits and withdrawals.
%% Each command sent to the aggregate produces an event persisted
%% through the in-memory ETS backend (used here for both events
%% and snapshots).

%% Usage:
%%     rebar3 shell < examples/demo_bank.script

StoreContext = {event_sourcing_store_ets, event_sourcing_store_ets},

io:format("~n[1] starting in-memory store (ETS)~n", []),
StartRes = event_sourcing_core_store:start(StoreContext),
io:format(" -> ~p~n", [StartRes]),

io:format("[2] starting bank account aggregate manager~n", []),
{ok, BankMgr} =
    event_sourcing_core_mgr_aggregate:start_link(
        bank_account_aggregate,
        StoreContext,
        bank_account_aggregate
    ),
io:format(" -> BankMgr pid: ~p~n", [BankMgr]),

AccountId = <<"bank-account-123">>,

io:format("[3] deposit $100~n", []),
Res1 = event_sourcing_core_mgr_aggregate:dispatch(
    BankMgr,
    {bank, deposit, AccountId, 100}
),
io:format(" -> ~p~n", [Res1]),

io:format("[4] withdraw $10~n", []),
Res2 = event_sourcing_core_mgr_aggregate:dispatch(
    BankMgr,
    {bank, withdraw, AccountId, 10}
),
io:format(" -> ~p~n", [Res2]),

io:format("[5] withdraw $1000 (should fail)~n", []),
Res3 = event_sourcing_core_mgr_aggregate:dispatch(
    BankMgr,
    {bank, withdraw, AccountId, 1000}
),
io:format(" -> ~p~n", [Res3]),

ok.
